(ns aoc2021-clj.6)

(def inp [3,3,5,1,1,3,4,2,3,4,3,1,1,3,3,1,5,4,4,1,4,1,1,1,3,3,2,3,3,4,2,5,1,4,1,2,2,4,2,5,1,2,2,1,1,1,1,4,5,4,3,1,4,4,4,5,1,1,4,3,4,2,1,1,1,1,5,2,1,4,2,4,2,5,5,5,3,3,5,4,5,1,1,5,5,5,2,1,3,1,1,2,2,2,2,1,1,2,1,5,1,2,1,2,5,5,2,1,1,4,2,1,4,2,1,1,1,4,2,5,1,5,1,1,3,1,4,3,1,3,2,1,3,1,4,1,2,1,5,1,2,1,4,4,1,3,1,1,1,1,1,5,2,1,5,5,5,3,3,1,2,4,3,2,2,2,2,2,4,3,4,4,4,1,2,2,3,1,1,4,1,1,1,2,1,4,2,1,2,1,1,2,1,5,1,1,3,1,4,3,2,1,1,1,5,4,1,2,5,2,2,1,1,1,1,2,3,3,2,5,1,2,1,2,3,4,3,2,1,1,2,4,3,3,1,1,2,5,1,3,3,4,2,3,1,2,1,4,3,2,2,1,1,2,1,4,2,4,1,4,1,4,4,1,4,4,5,4,1,1,1,3,1,1,1,4,3,5,1,1,1,3,4,1,1,4,3,1,4,1,1,5,1,2,2,5,5,2,1,5])


(defn make-form [input]
  (reduce (fn [m x] (update m x (fnil inc 0))) {} input))

(defn one-day [i]
  (reduce (fn [m x]
            (if (= x 0)
              (-> m
                  (update 6 (fnil #(+ (get i x) %) 0))
                  (update 8 (fnil #(+ (get i x) %) 0)))
              (update m (dec x) (fnil #(+ (get i x) %) 0))))
          {} (keys i)))

(defn part1 [input]
  (reduce + (map second (nth (iterate one-day (make-form input)) 80))))

(defn part2 [input]
  (reduce + (map second (nth (iterate one-day (make-form input)) 256))))